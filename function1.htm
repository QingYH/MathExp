<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>高等数学映射与函数可视化教程</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3a0ca3;
            --accent1: #f72585;
            --accent2: #4cc9f0;
            --light: #f8f9fa;
            --dark: #212529;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: var(--dark);
            line-height: 1.6;
            padding: 20px;
            min-height: 100vh;
            font-size: 18px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 40px;
            padding: 20px;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            color: white;
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        h2 {
            font-size: 2.2rem;
            color: var(--secondary);
            margin: 25px 0 15px;
            border-bottom: 3px solid var(--accent1);
            padding-bottom: 8px;
        }
        
        h3 {
            font-size: 1.8rem;
            color: var(--primary);
            margin: 20px 0 10px;
        }
        
        .intro {
            font-size: 1.4rem;
            margin-bottom: 30px;
            text-align: center;
            color: var(--dark);
            background-color: rgba(255, 255, 255, 0.7);
            padding: 15px;
            border-radius: 10px;
        }
        
        .card-container {
            display: flex;
            flex-wrap: wrap;
            gap: 25px;
            margin-bottom: 40px;
        }
        
        .card {
            flex: 1 1 300px;
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border-top: 5px solid var(--accent1);
        }
        
        .card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }
        
        .card h3 {
            color: var(--accent1);
            display: flex;
            align-items: center;
        }
        
        .card h3 i {
            margin-right: 10px;
            font-size: 1.5rem;
        }
        
        .definition {
            background-color: rgba(67, 97, 238, 0.1);
            padding: 20px;
            border-left: 5px solid var(--primary);
            margin: 20px 0;
            border-radius: 0 10px 10px 0;
            font-size: 1.3rem;
        }
        
        .example {
            background-color: rgba(76, 201, 240, 0.1);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 5px solid var(--accent2);
        }
        
        .visualization {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            margin: 30px 0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            text-align: center;
        }
        
        .chart-container {
            height: 300px;
            margin: 20px auto;
            position: relative;
        }
        
        .interactive {
            background: linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%);
            padding: 25px;
            border-radius: 15px;
            margin: 30px 0;
            color: white;
        }
        
        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin: 20px 0;
            justify-content: center;
        }
        
        button {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1.2rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        button:hover {
            background-color: var(--secondary);
            transform: translateY(-3px);
            box-shadow: 0 7px 10px rgba(0, 0, 0, 0.15);
        }
        
        input[type="range"] {
            width: 100%;
            margin: 15px 0;
        }
        
        .math-example {
            background-color: rgba(247, 37, 133, 0.1);
            padding: 20px;
            border-radius: 10px;
            margin: 25px 0;
            border-left: 5px solid var(--accent1);
        }
        
        .math-expression {
            font-family: 'Cambria Math', serif;
            font-size: 1.5rem;
            text-align: center;
            margin: 15px 0;
            padding: 10px;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 5px;
        }
        
        footer {
            text-align: center;
            margin-top: 50px;
            padding: 20px;
            background-color: var(--dark);
            color: white;
            border-radius: 10px;
        }
        
        .highlight {
            background-color: yellow;
            padding: 2px 5px;
            border-radius: 3px;
            font-weight: bold;
        }
        
        @media (max-width: 768px) {
            .card-container {
                flex-direction: column;
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            h2 {
                font-size: 1.8rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>🎯 高等数学映射与函数可视化教程</h1>
            <p>通过直观有趣的方式理解映射与函数的概念</p>
        </header>
        
        <section class="intro">
            <p>映射和函数是高等数学的核心概念，它们描述了数学对象之间的关系。本教程将通过可视化、互动和有趣的例子帮助你深入理解这些概念。</p>
        </section>
        
        <section>
            <h2>📚 映射的定义</h2>
            <div class="definition">
                <p>在数学中，<span class="highlight">映射</span>是一种特殊的对应关系，它将一个集合（称为定义域）中的每个元素与另一个集合（称为值域）中的唯一元素相关联。</p>
                <p class="math-expression">f: A → B</p>
                <p>其中 A 是定义域，B 是值域，f 是映射规则。</p>
            </div>
            
            <div class="card-container">
                <div class="card">
                    <h3>🔑 映射的关键特性</h3>
                    <ul>
                        <li>定义域中的每个元素都有像</li>
                        <li>每个元素的像是唯一的</li>
                        <li>值域中的元素不一定都有原像</li>
                    </ul>
                </div>
                
                <div class="card">
                    <h3>📊 映射的类型</h3>
                    <ul>
                        <li>单射：不同的元素映射到不同的像</li>
                        <li>满射：值域中的每个元素都有原像</li>
                        <li>双射：既是单射又是满射</li>
                    </ul>
                </div>
            </div>
            
            <div class="visualization">
                <h3>映射可视化</h3>
                <p>下面展示了从集合A到集合B的映射关系：</p>
                <div class="chart-container">
                    <canvas id="mappingChart"></canvas>
                </div>
            </div>
            
            <div class="math-example">
                <h3>🍎 有趣的映射例子</h3>
                <p>假设集合A = {苹果, 香蕉, 橙子}，集合B = {红色, 黄色, 橙色}</p>
                <p>定义一个映射 f: A → B，将水果映射到它们的颜色：</p>
                <p class="math-expression">f(苹果) = 红色, f(香蕉) = 黄色, f(橙子) = 橙色</p>
                <p>这是一个双射，因为每个水果有唯一的颜色，每种颜色也有对应的水果。</p>
            </div>
        </section>
        
        <section>
            <h2>📈 函数的定义</h2>
            <div class="definition">
                <p><span class="highlight">函数</span>是一种特殊的映射，其定义域和值域都是实数集（或其子集）。函数通常表示为：</p>
                <p class="math-expression">y = f(x)</p>
                <p>其中 x 是自变量，y 是因变量，f 是函数规则。</p>
            </div>
            
            <div class="card-container">
                <div class="card">
                    <h3>🎯 函数的要素</h3>
                    <ul>
                        <li>定义域：自变量 x 的取值范围</li>
                        <li>值域：因变量 y 的取值范围</li>
                        <li>对应法则：x 与 y 之间的对应关系</li>
                    </ul>
                </div>
                
                <div class="card">
                    <h3>📐 常见函数类型</h3>
                    <ul>
                        <li>线性函数：y = kx + b</li>
                        <li>二次函数：y = ax² + bx + c</li>
                        <li>三角函数：y = sin(x), y = cos(x) 等</li>
                        <li>指数函数：y = aˣ</li>
                        <li>对数函数：y = logₐ(x)</li>
                    </ul>
                </div>
            </div>
            
            <div class="interactive">
                <h3>🔧 函数图像探索</h3>
                <p>选择一个函数类型，观察其图像变化：</p>
                <div class="controls">
                    <button onclick="showLinear()">线性函数</button>
                    <button onclick="showQuadratic()">二次函数</button>
                    <button onclick="showTrigonometric()">三角函数</button>
                    <button onclick="showExponential()">指数函数</button>
                </div>
                <div class="chart-container">
                    <canvas id="functionChart"></canvas>
                </div>
                <p id="functionDescription">选择一个函数类型查看其图像和特性</p>
            </div>
            
            <div class="math-example">
                <h3>🚀 有趣的函数例题</h3>
                <p>例题1：抛物线运动</p>
                <p>一个球从高度为10米的地方以20米/秒的速度被抛出，其高度随时间变化的函数为：</p>
                <p class="math-expression">h(t) = -5t² + 20t + 10</p>
                <p>其中 t 是时间（秒），h(t) 是高度（米）。</p>
                <p>问题：球何时达到最高点？最高高度是多少？</p>
                <button onclick="showSolution()">显示解答</button>
                <div id="solution" style="display: none; margin-top: 15px;">
                    <p>解答：这是一个二次函数，最高点出现在 t = -b/(2a) = -20/(2×(-5)) = 2秒</p>
                    <p>最高高度为 h(2) = -5×2² + 20×2 + 10 = 30米</p>
                </div>
            </div>
        </section>
        
        <section>
            <h2>🔄 映射与函数的关系</h2>
            <div class="definition">
                <p>所有函数都是映射，但并非所有映射都是函数。函数是定义域和值域为实数集（或其子集）的特殊映射。</p>
            </div>
            
            <div class="card">
                <h3>📋 比较表</h3>
                <table style="width: 100%; border-collapse: collapse; margin-top: 15px;">
                    <tr style="background-color: var(--primary); color: white;">
                        <th style="padding: 12px; text-align: left;">特性</th>
                        <th style="padding: 12px; text-align: left;">映射</th>
                        <th style="padding: 12px; text-align: left;">函数</th>
                    </tr>
                    <tr style="background-color: rgba(67, 97, 238, 0.1);">
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">定义域</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">任意集合</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">实数集或其子集</td>
                    </tr>
                    <tr style="background-color: white;">
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">值域</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">任意集合</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">实数集或其子集</td>
                    </tr>
                    <tr style="background-color: rgba(67, 97, 238, 0.1);">
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">表示法</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">f: A → B</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">y = f(x)</td>
                    </tr>
                </table>
            </div>
        </section>
        
        <footer>
            <p>🎓 高等数学映射与函数可视化教程 | 通过有趣的方式学习数学概念</p>
            <p>© 2023 数学可视化项目</p>
        </footer>
    </div>

    <script>
        // 映射关系图
        const mappingCtx = document.getElementById('mappingChart').getContext('2d');
        const mappingChart = new Chart(mappingCtx, {
            type: 'scatter',
            data: {
                datasets: [
                    {
                        label: '集合A',
                        data: [{x: 1, y: 5}, {x: 2, y: 5}, {x: 3, y: 5}],
                        backgroundColor: 'rgba(247, 37, 133, 0.8)',
                        pointRadius: 10,
                        pointHoverRadius: 15
                    },
                    {
                        label: '集合B',
                        data: [{x: 4, y: 2}, {x: 4, y: 5}, {x: 4, y: 8}],
                        backgroundColor: 'rgba(67, 97, 238, 0.8)',
                        pointRadius: 10,
                        pointHoverRadius: 15
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        min: 0,
                        max: 5,
                        display: false
                    },
                    y: {
                        min: 0,
                        max: 10,
                        display: false
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            font: {
                                size: 16
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                if (context.datasetIndex === 0) {
                                    const points = ['苹果', '香蕉', '橙子'];
                                    return `集合A: ${points[context.dataIndex]}`;
                                } else {
                                    const points = ['红色', '黄色', '橙色'];
                                    return `集合B: ${points[context.dataIndex]}`;
                                }
                            }
                        }
                    }
                }
            }
        });

        // 添加映射线
        mappingChart.data.datasets.push({
            label: '映射关系',
            data: [],
            type: 'line',
            borderColor: 'rgba(76, 201, 240, 0.7)',
            borderWidth: 2,
            pointRadius: 0,
            showLine: true
        });

        // 初始化映射线数据
        setTimeout(() => {
            mappingChart.data.datasets[2].data = [
                {x: 1, y: 5}, {x: 4, y: 2},
                {x: 2, y: 5}, {x: 4, y: 5},
                {x: 3, y: 5}, {x: 4, y: 8}
            ];
            mappingChart.update();
        }, 1000);

        // 函数图像
        const functionCtx = document.getElementById('functionChart').getContext('2d');
        let functionChart = new Chart(functionCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: '函数图像',
                    data: [],
                    borderColor: 'rgba(247, 37, 133, 0.8)',
                    backgroundColor: 'rgba(247, 37, 133, 0.1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'x',
                            font: {
                                size: 16
                            }
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'y = f(x)',
                            font: {
                                size: 16
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            font: {
                                size: 16
                            }
                        }
                    }
                }
            }
        });

        // 函数示例
        function showLinear() {
            const labels = [];
            const data = [];
            for (let x = -10; x <= 10; x++) {
                labels.push(x);
                data.push(2*x + 3);
            }
            
            functionChart.data.labels = labels;
            functionChart.data.datasets[0].data = data;
            functionChart.data.datasets[0].label = 'y = 2x + 3';
            functionChart.update();
            
            document.getElementById('functionDescription').innerHTML = 
                '线性函数：图像为一条直线，斜率为2，y轴截距为3';
        }

        function showQuadratic() {
            const labels = [];
            const data = [];
            for (let x = -5; x <= 5; x += 0.5) {
                labels.push(x);
                data.push(x*x - 2*x - 3);
            }
            
            functionChart.data.labels = labels;
            functionChart.data.datasets[0].data = data;
            functionChart.data.datasets[0].label = 'y = x² - 2x - 3';
            functionChart.update();
            
            document.getElementById('functionDescription').innerHTML = 
                '二次函数：图像为抛物线，开口向上，顶点在(1, -4)';
        }

        function showTrigonometric() {
            const labels = [];
            const data = [];
            for (let x = 0; x <= 4*Math.PI; x += 0.1) {
                labels.push(x.toFixed(1));
                data.push(2*Math.sin(x));
            }
            
            functionChart.data.labels = labels;
            functionChart.data.datasets[0].data = data;
            functionChart.data.datasets[0].label = 'y = 2sin(x)';
            functionChart.update();
            
            document.getElementById('functionDescription').innerHTML = 
                '三角函数：正弦函数，振幅为2，周期为2π';
        }

        function showExponential() {
            const labels = [];
            const data = [];
            for (let x = -2; x <= 3; x += 0.1) {
                labels.push(x.toFixed(1));
                data.push(Math.exp(x));
            }
            
            functionChart.data.labels = labels;
            functionChart.data.datasets[0].data = data;
            functionChart.data.datasets[0].label = 'y = eˣ';
            functionChart.update();
            
            document.getElementById('functionDescription').innerHTML = 
                '指数函数：以自然常数e为底的指数函数，图像快速增长';
        }

        // 显示例题解答
        function showSolution() {
            document.getElementById('solution').style.display = 'block';
        }

        // 默认显示线性函数
        window.onload = showLinear;
    </script>
</body>
</html>