
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>函数连续性及间断点动态演示</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            margin: 0;
            padding: 20px;
            color: #333;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            background-color: rgba(255,255,255,0.9);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            font-size: 2.5em;
            margin-bottom: 30px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        .theory {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
            border-left: 5px solid #3498db;
            font-size: 1.2em;
        }
        .function-selector {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        .function-btn {
            background: linear-gradient(45deg, #3498db, #2ecc71);
            color: white;
            border: none;
            padding: 12px 20px;
            margin: 5px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1.1em;
            transition: all 0.3s;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .function-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.15);
        }
        .function-btn.active {
            background: linear-gradient(45deg, #e74c3c, #f39c12);
        }
        .graph-container {
            position: relative;
            width: 800px;
            height: 500px;
            margin: 0 auto;
            border: 2px solid #3498db;
            border-radius: 10px;
            overflow: hidden;
            background-color: white;
        }
        canvas {
            display: block;
        }
        .function-display {
            text-align: center;
            font-size: 1.8em;
            margin: 20px 0;
            color: #2c3e50;
            font-weight: bold;
        }
        .discontinuity-info {
            background-color: #fff8e1;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            border-left: 5px solid #ffc107;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>一元函数连续性及间断点动态演示</h1>
        
        <div class="theory">
            <p><strong>函数连续性定义：</strong> 设函数 \( f(x) \) 在点 \( x_0 \) 的某邻域内有定义，若满足以下三个条件：</p>
            <ol>
                <li>\( f(x_0) \) 存在</li>
                <li>\( \lim\limits_{x \to x_0} f(x) \) 存在</li>
                <li>\( \lim\limits_{x \to x_0} f(x) = f(x_0) \)</li>
            </ol>
            <p>则称 \( f(x) \) 在点 \( x_0 \) 处连续，否则称为间断。</p>
            
            <p><strong>间断点分类：</strong></p>
            <ul>
                <li><strong>第一类间断点：</strong> 左右极限都存在但不相等（跳跃间断点）或左右极限存在且相等但不等于函数值（可去间断点）</li>
                <li><strong>第二类间断点：</strong> 至少有一侧极限不存在（如无穷间断点、振荡间断点等）</li>
            </ul>
        </div>
        
        <div class="function-selector">
            <button class="function-btn active" data-fn="continuous">连续函数 \( f(x) = x^2 \)</button>
            <button class="function-btn" data-fn="removable">可去间断点 \( f(x) = \frac{x^2-1}{x-1} \)</button>
            <button class="function-btn" data-fn="jump">跳跃间断点 \( f(x) = \begin{cases} x & x \leq 1 \\ x+1 & x > 1 \end{cases} \)</button>
            <button class="function-btn" data-fn="infinite">无穷间断点 \( f(x) = \frac{1}{x} \)</button>
            <button class="function-btn" data-fn="oscillating">振荡间断点 \( f(x) = 2\sin\left(\frac{1}{x}\right) \)</button>
        </div>
        
        <div class="function-display" id="current-function">
            \( f(x) = x^2 \)
        </div>
        
        <div class="graph-container">
            <canvas id="functionCanvas" width="800" height="500"></canvas>
        </div>
        
        <div class="discontinuity-info" id="discontinuity-info">
            当前演示连续函数，无间断点。
        </div>
    </div>

    <script>
        const canvas = document.getElementById('functionCanvas');
        const ctx = canvas.getContext('2d');
        const functionDisplay = document.getElementById('current-function');
        const discontinuityInfo = document.getElementById('discontinuity-info');
        
        // 图形参数
        const width = canvas.width;
        const height = canvas.height;
        const xMin = -10;
        const xMax = 10;
        const yMin = -10;
        const yMax = 10;
        const scaleX = width / (xMax - xMin);
        const scaleY = height / (yMax - yMin);
        
        // 动画参数
        let animationId = null;
        let currentX = xMin;
        let direction = 1;
        let speed = 0.02;
        let currentFunction = 'continuous';
        
        // 坐标轴绘制
        function drawAxes() {
            ctx.strokeStyle = '#333';
            ctx.lineWidth = 2;
            
            // X轴
            const xAxisY = height - (-yMin) * scaleY;
            ctx.beginPath();
            ctx.moveTo(0, xAxisY);
            ctx.lineTo(width, xAxisY);
            ctx.stroke();
            
            // Y轴
            const yAxisX = (-xMin) * scaleX;
            ctx.beginPath();
            ctx.moveTo(yAxisX, 0);
            ctx.lineTo(yAxisX, height);
            ctx.stroke();
            
            // 刻度
            ctx.font = '14px Arial';
            ctx.fillStyle = '#333';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'top';
            
            // X轴刻度
            for (let x = Math.ceil(xMin); x <= Math.floor(xMax); x++) {
                if (x === 0) continue;
                const xPos = (x - xMin) * scaleX;
                ctx.beginPath();
                ctx.moveTo(xPos, xAxisY - 5);
                ctx.lineTo(xPos, xAxisY + 5);
                ctx.stroke();
                ctx.fillText(x.toString(), xPos, xAxisY + 8);
            }
            
            // Y轴刻度
            ctx.textAlign = 'right';
            ctx.textBaseline = 'middle';
            for (let y = Math.ceil(yMin); y <= Math.floor(yMax); y++) {
                if (y === 0) continue;
                const yPos = height - (y - yMin) * scaleY;
                ctx.beginPath();
                ctx.moveTo(yAxisX - 5, yPos);
                ctx.lineTo(yAxisX + 5, yPos);
                ctx.stroke();
                ctx.fillText(y.toString(), yAxisX - 8, yPos);
            }
            
            // 原点标记
            ctx.textAlign = 'right';
            ctx.textBaseline = 'top';
            ctx.fillText('O', yAxisX - 8, xAxisY + 8);
        }
        
        // 函数定义
        const functions = {
            continuous: {
                name: '连续函数',
                latex: 'f(x) = x^2',
                fn: x => x*x,
                discontinuities: []
            },
            removable: {
                name: '可去间断点',
                latex: 'f(x) = \\frac{x^2-1}{x-1}',
                fn: x => x === 1 ? undefined : (x*x - 1)/(x - 1),
                discontinuities: [{x: 1, type: 'removable', limit: 2}]
            },
            jump: {
                name: '跳跃间断点',
                latex: 'f(x) = \\begin{cases} x-2 & x \\leq -2 \\\\ x+4 & x > -2 \\end{cases}',
                fn: x => x <= -2 ? x-2 : x + 4,
                discontinuities: [{x: -2, type: 'jump', leftLimit: -4, rightLimit: 2}]
            },
            infinite: {
                name: '无穷间断点',
                latex: 'f(x) = \\frac{1}{x}',
                fn: x => x === 0 ? undefined : 1/x,
                discontinuities: [{x: 0, type: 'infinite'}]
            },
            oscillating: {
                name: '振荡间断点',
                latex: 'f(x) = 2\\sin\\left(\\frac{1}{x}\\right)',
                fn: x => x === 0 ? undefined : 2*Math.sin(1/x),
                discontinuities: [{x: 0, type: 'oscillating'}]
            },
        };
        
        // 绘制函数曲线
        function drawFunction() {
            const fn = functions[currentFunction].fn;
            ctx.strokeStyle = '#e74c3c';
            ctx.lineWidth = 3;
            ctx.beginPath();
            
            let firstPoint = true;
            for (let pixelX = 0; pixelX <= width; pixelX++) {
                const x = xMin + pixelX / scaleX;
                const y = fn(x);
                
                if (y === undefined || y < yMin || y > yMax) {
                    firstPoint = true;
                    continue;
                }
                
                const pixelY = height - (y - yMin) * scaleY;
                
                if (firstPoint) {
                    ctx.moveTo(pixelX, pixelY);
                    firstPoint = false;
                } else {
                    ctx.lineTo(pixelX, pixelY);
                }
            }
            
            ctx.stroke();
        }
        
        // 绘制移动点
        function drawMovingPoint(x) {
            const fn = functions[currentFunction].fn;
            const y = fn(x);
            
            if (y === undefined || y < yMin || y > yMax) return;
            
            const pixelX = (x - xMin) * scaleX;
            const pixelY = height - (y - yMin) * scaleY;
            
            // 检查是否是间断点
            const discontinuity = functions[currentFunction].discontinuities.find(d => Math.abs(d.x - x) < 0.2);
            
            if (discontinuity) {
               
                // 空心圆点效果
                ctx.strokeStyle = '#9b59b6';
                ctx.lineWidth = 3;
                ctx.beginPath();
                ctx.arc(pixelX, pixelY, 10, 0, Math.PI * 2);
                ctx.stroke();
                // 间断点特殊效果
                ctx.fillStyle = '#9b59b6';
                ctx.beginPath();
                ctx.arc(pixelX, pixelY, 10, 0, Math.PI * 2);
                ctx.fill();
                
                // 闪烁效果
                if (Math.floor(Date.now() / 200) % 2 === 0) {
                    ctx.strokeStyle = '#9b59b6';
                    ctx.lineWidth = 2;
                    ctx.beginPath();
                    ctx.arc(pixelX, pixelY, 15, 0, Math.PI * 2);
                    ctx.stroke();
                }
                
                // 显示间断点类型
                ctx.font = 'bold 16px Arial';
                ctx.fillStyle = '#9b59b6';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'bottom';
                
                let typeText = '';
                switch (discontinuity.type) {
                    case 'removable':
                        typeText = `可去间断点 (极限=${discontinuity.limit})`;
                        break;
                    case 'jump':
                        typeText = `跳跃间断点 (左极限=${discontinuity.leftLimit}, 右极限=${discontinuity.rightLimit})`;
                        break;
                    case 'infinite':
                        typeText = '无穷间断点';
                        break;
                    case 'oscillating':
                        typeText = '震荡间断点';
                        break;
                }
                
                ctx.fillText(typeText, pixelX, pixelY - 15);
            } else {
                // 连续点效果 - 彗星轨迹
                ctx.fillStyle = '#2ecc71';
                ctx.beginPath();
                ctx.arc(pixelX, pixelY, 8, 0, Math.PI * 2);
                ctx.fill();
                
                // 轨迹
                const trailLength = 30;
                for (let i = 1; i <= trailLength; i++) {
                    const trailX = x - i * speed * direction;
                    const trailY = fn(trailX);
                    
                    if (trailY === undefined || trailY < yMin || trailY > yMax) continue;
                    
                    const trailPixelX = (trailX - xMin) * scaleX;
                    const trailPixelY = height - (trailY - yMin) * scaleY;
                    
                    const alpha = 1 - i / trailLength;
                    ctx.fillStyle = `rgba(46, 204, 113, ${alpha})`;
                    ctx.beginPath();
                    ctx.arc(trailPixelX, trailPixelY, 6 * alpha, 0, Math.PI * 2);
                    ctx.fill();
                }
                
                // 显示"连续"标签
                if (Math.floor(Date.now() / 2000) % 4 === 0) {
                    ctx.font = 'bold 16px Arial';
                    ctx.fillStyle = '#2ecc71';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
                    ctx.fillText('连续', pixelX, pixelY - 15);
                }
            }
        }
        
        // 动画循环
        function animate() {
            ctx.clearRect(0, 0, width, height);
            drawAxes();
            drawFunction();
            drawMovingPoint(currentX);
            
            // 检查当前是否接近间断点
            const discontinuity = functions[currentFunction].discontinuities.find(d =>Math.abs(d.x - currentX) < 0.13);
    
    // 根据是否接近间断点调整速度
    const baseSpeed = 0.02;
    
   const slowFactor = 0.02; // 减速系数
  // const currentSpeed = discontinuity ? baseSpeed * slowFactor : baseSpeed;
    let currentSpeed = discontinuity ? baseSpeed * slowFactor : baseSpeed;    
     if (currentFunction === 'infinite') {
    // const discontinuity = functions[currentFunction].discontinuities.find(d =>Math.abs(d.x - currentX) < 0.1);
      currentSpeed = discontinuity ? baseSpeed * 0.01 : baseSpeed;
              
            }  
         
   
    
    
    drawMovingPoint(currentX);
    currentX += currentSpeed * direction;
            // 更新x值
            //currentX += speed * direction;
            
            // 边界检查
            if (currentX > xMax) {
                direction = -1;
                currentX = xMax;
            } else if (currentX < xMin) {
                direction = 1;
                currentX = xMin;
            }
            
            animationId = requestAnimationFrame(animate);
        }
        
        // 初始化
        function init() {
            drawAxes();
            drawFunction();
            animate();
            
            // 按钮事件
            document.querySelectorAll('.function-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.function-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    currentFunction = this.dataset.fn;
                    functionDisplay.innerHTML = `\\( ${functions[currentFunction].latex} \\)`;
                    
                    // 更新间断点信息
                    if (functions[currentFunction].discontinuities.length > 0) {
                        let info = `<strong>${functions[currentFunction].name}</strong><br>`;
                        functions[currentFunction].discontinuities.forEach(d => {
                            switch (d.type) {
                                case 'removable':
                                    info += `x=${d.x} 是可去间断点，函数值未定义但极限存在 (极限=${d.limit})，若补充定义函数值为${d.limit}，则该点就成为连续点`;
                                    break;
                                case 'jump':
                                    info += `x=${d.x} 是跳跃间断点，左右极限不相等 (左极限=${d.leftLimit}, 右极限=${d.rightLimit})`;
                                    break;
                                case 'infinite':
                                    info += `x=${d.x} 是无穷间断点，该点处函数极限为无穷大（非正常极限）`;
                                    break;
                                case 'oscillating':
                                    info += `x=${d.x} 是震荡间断点，该点附近函数值不停地震荡，因此，这一点的左右极限都不存在`;
                                    break;
                            }
                        });
                        discontinuityInfo.innerHTML = info;
                    } else {
                        discontinuityInfo.innerHTML = '当前演示连续函数，无间断点。';
                    }
                    
                    // 重新渲染MathJax
                    if (window.MathJax) {
                        MathJax.typeset();
                    }
                });
            });
        }
        
        // 启动
        init();
        
        // 窗口大小调整
        window.addEventListener('resize', function() {
            if (animationId) {
                cancelAnimationFrame(animationId);
            }
            init();
        });
    </script>
</body>
</html>
